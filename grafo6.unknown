import sys
import networkx as nx
import matplotlib.pyplot as plt
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QPushButton,
    QVBoxLayout, QWidget, QLabel, QLineEdit, QMessageBox
)
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas


class GrafoWidget(FigureCanvas):
    def __init__(self):
        self.fig, self.ax = plt.subplots(figsize=(5, 5))
        super().__init__(self.fig)
        self.ax.axis("off")

        self.G = self._crear_grafo()
        self.pos = self._posiciones()

    def _crear_grafo(self):
        G = nx.Graph()
        G.add_nodes_from([0, 1, 2, 3, 4, 5])
        aristas = [(4, 0), (4, 1), (4, 2), (2, 3), (2, 5)]
        G.add_edges_from(aristas)
        return G

    def _posiciones(self):
        return {
            0: (-0.8, 0.2),
            1: (-0.8, -0.8),
            4: (0, -0.3),
            2: (0.8, 0.1),
            3: (1.4, -0.6),
            5: (1.4, 0.8)
        }

    def dibujar_grafo(self, colores=None):
        self.ax.clear()
        self.ax.axis("off")

        node_colors = colores if colores else ["white"] * len(self.G.nodes)

        nx.draw(
            self.G, self.pos, with_labels=True,
            node_size=1000, node_color=node_colors,
            edgecolors="black", font_size=14,
            font_weight="bold", ax=self.ax
        )

        self.draw()


class VentanaPrincipal(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("simulacion del grafo #6")
        self.setGeometry(200, 200, 600, 700)

        widget = QWidget()
        layout = QVBoxLayout(widget)

        self.input_personalizado = QLineEdit()
        self.input_personalizado.setPlaceholderText("Escribe el orden del recorrido (ejemplo: 4, 0, 2, 5, 3)")
        self.input_personalizado.setStyleSheet("font-size: 14px; padding: 8px;")

        self.boton = QPushButton("Iniciar")
        self.boton.setStyleSheet(
            "font-size: 16px; padding: 10px; background-color: #0078D7; color: white; border-radius: 8px;"
        )
        self.boton.clicked.connect(self.iniciar_recorrido)

        self.canvas = GrafoWidget()

        
        self.etiqueta = QLabel("Ingresa el orden de recorrido")
        self.etiqueta.setStyleSheet("font-size: 16px; font-weight: bold; padding: 10px;")

        layout.addWidget(self.input_personalizado)
        layout.addWidget(self.boton)
        layout.addWidget(self.canvas)
        layout.addWidget(self.etiqueta)
        self.setCentralWidget(widget)

        self.recorrido = []
        self.indice_actual = 0
        self.timer = QTimer()
        self.timer.timeout.connect(self._animar_paso)

    def iniciar_recorrido(self):
        G = self.canvas.G
        texto = self.input_personalizado.text().replace(" ", "")

        try:
            self.recorrido = [int(x) for x in texto.split(",") if x != ""]
            #valide los nodos 
            for n in self.recorrido:
                if n not in G.nodes:
                    raise ValueError
        except ValueError:
            QMessageBox.warning(self, "Error", "Formato inválido o nodo inexistente.\nEjemplo correcto: 4,0,2,5,3")
            return

        self.etiqueta.setText(f"Recorrido: {' → '.join(map(str, self.recorrido))}")
        self.indice_actual = 0
        self.colores = ["white"] * len(G.nodes)

        self.canvas.dibujar_grafo(self.colores)
        self.timer.start(1000)

    def _animar_paso(self):
        if self.indice_actual < len(self.recorrido):
            nodo = self.recorrido[self.indice_actual]
            self.colores[nodo] = "#B208B8"  
            self.canvas.dibujar_grafo(self.colores)
            self.indice_actual += 1
        else:
            self.timer.stop()
            self.etiqueta.setText(self.etiqueta.text() + " Recorrido finalizado")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    ventana = VentanaPrincipal()
    ventana.show()
    sys.exit(app.exec())